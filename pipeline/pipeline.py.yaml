apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: safe-intelligence-pipeline-6-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12, pipelines.kubeflow.org/pipeline_compilation_time: '2022-06-10T20:22:45.919035',
    pipelines.kubeflow.org/pipeline_spec: '{"name": "safe-intelligence-pipeline-6"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.12}
spec:
  entrypoint: safe-intelligence-pipeline-6
  templates:
  - name: collect-files
    container:
      args: []
      command: [python3, ./file-collect.py, --user, DanielSCrouch, --repo, safe-intel,
        --branch, main, --subdirectory, files, --outdir, /mnt/files, --respath, /tmp/outputs/respath/data]
      image: index.docker.io/duartcs/filecollect:latest
      volumeMounts:
      - {mountPath: /mnt, name: volume-creation}
    inputs:
      parameters:
      - {name: volume-creation-name}
    outputs:
      parameters:
      - name: collect-files-respath
        valueFrom: {path: /tmp/outputs/respath/data}
      artifacts:
      - {name: collect-files-respath, path: /tmp/outputs/respath/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Downloads
          files from Github Repository directory.", "implementation": {"container":
          {"command": ["python3", "./file-collect.py", "--user", {"inputValue": "user"},
          "--repo", {"inputValue": "repo"}, "--branch", {"inputValue": "branch"},
          "--subdirectory", {"inputValue": "subdirectory"}, "--outdir", {"inputValue":
          "outdir"}, "--respath", {"outputPath": "respath"}], "image": "index.docker.io/duartcs/filecollect:latest"}},
          "inputs": [{"default": "DanielSCrouch", "description": "Github username.",
          "name": "user", "type": "String"}, {"default": "safe-intel", "description":
          "Github repository name.", "name": "repo", "type": "String"}, {"default":
          "main", "description": "Github branch name.", "name": "branch", "type":
          "String"}, {"default": "files", "description": "Github sub-directory name.",
          "name": "subdirectory", "type": "String"}, {"default": "/mnt/files", "description":
          "Path to local directory to save files to.", "name": "outdir", "type": "String"}],
          "name": "Collect Files", "outputs": [{"description": "Path to file to save
          results to. Results are paths to each downloaded file.", "name": "respath",
          "type": "Data"}]}', pipelines.kubeflow.org/component_ref: '{"digest": "0a55bbde33a9a3d357971d34875b636e049075bdfc0e5b4f3684b080a51727d1"}',
        pipelines.kubeflow.org/arguments.parameters: '{"branch": "main", "outdir":
          "/mnt/files", "repo": "safe-intel", "subdirectory": "files", "user": "DanielSCrouch"}'}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: for-loop-1
    inputs:
      parameters:
      - {name: collect-files-respath-loop-item}
      - {name: volume-creation-name}
    dag:
      tasks:
      - name: upload-file
        template: upload-file
        arguments:
          parameters:
          - {name: collect-files-respath-loop-item, value: '{{inputs.parameters.collect-files-respath-loop-item}}'}
          - {name: volume-creation-name, value: '{{inputs.parameters.volume-creation-name}}'}
  - name: safe-intelligence-pipeline-6
    dag:
      tasks:
      - name: collect-files
        template: collect-files
        dependencies: [volume-creation]
        arguments:
          parameters:
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
      - name: for-loop-1
        template: for-loop-1
        dependencies: [collect-files, volume-creation]
        arguments:
          parameters:
          - {name: collect-files-respath-loop-item, value: '{{item}}'}
          - {name: volume-creation-name, value: '{{tasks.volume-creation.outputs.parameters.volume-creation-name}}'}
        withParam: '{{tasks.collect-files.outputs.parameters.collect-files-respath}}'
      - {name: volume-creation, template: volume-creation}
  - name: upload-file
    container:
      args: []
      command: [python3, ./file-upload.py, --filepath, '{{inputs.parameters.collect-files-respath-loop-item}}',
        --storageurl, '18.132.68.212:8082', --accesskey, admin, --secretkey, admin1234,
        --region, '', --bucket, test, --respath, /tmp/outputs/respath/data]
      image: index.docker.io/duartcs/fileupload:latest
      volumeMounts:
      - {mountPath: /mnt, name: volume-creation}
    inputs:
      parameters:
      - {name: collect-files-respath-loop-item}
      - {name: volume-creation-name}
    outputs:
      artifacts:
      - {name: upload-file-respath, path: /tmp/outputs/respath/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Uploads
          a file to MinIO Bucket.", "implementation": {"container": {"command": ["python3",
          "./file-upload.py", "--filepath", {"inputValue": "filepath"}, "--storageurl",
          {"inputValue": "storageurl"}, "--accesskey", {"inputValue": "accesskey"},
          "--secretkey", {"inputValue": "secretkey"}, "--region", {"inputValue": "region"},
          "--bucket", {"inputValue": "bucket"}, "--respath", {"outputPath": "respath"}],
          "image": "index.docker.io/duartcs/fileupload:latest"}}, "inputs": [{"default":
          "/tmp/test-file-1.txt", "description": "Path to file for upload.", "name":
          "filepath", "type": "String"}, {"default": "18.132.68.212:8082", "description":
          "URL of MinIO Cloud storage.", "name": "storageurl", "type": "String"},
          {"default": "admin", "description": "Access key for MinIO Cloud storage.",
          "name": "accesskey", "type": "String"}, {"default": "admin1234", "description":
          "Secret key for MinIO Cloud storage.", "name": "secretkey", "type": "String"},
          {"default": "", "description": "MinIO Cloud storage region.", "name": "region",
          "type": "String"}, {"default": "test", "description": "MinIO Cloud storage
          bucket.", "name": "bucket", "type": "String"}], "name": "Upload File", "outputs":
          [{"description": "Path to file to save results to. Result is bucket/filename.",
          "name": "respath", "type": "Data"}]}', pipelines.kubeflow.org/component_ref: '{"digest":
          "fb310e771f5299428a81681afc0c819f3a8dbb793d573b93c19bab3c7ffa821f"}', pipelines.kubeflow.org/arguments.parameters: '{"accesskey":
          "admin", "bucket": "test", "filepath": "{{inputs.parameters.collect-files-respath-loop-item}}",
          "region": "", "secretkey": "admin1234", "storageurl": "18.132.68.212:8082"}'}
    volumes:
    - name: volume-creation
      persistentVolumeClaim: {claimName: '{{inputs.parameters.volume-creation-name}}'}
  - name: volume-creation
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-si-pipeline-pvc'
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          storageClassName: safe-intelligence-pipeline-sg
    outputs:
      parameters:
      - name: volume-creation-manifest
        valueFrom: {jsonPath: '{}'}
      - name: volume-creation-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: volume-creation-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.12
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
  ttlStrategy: {secondsAfterCompletion: 5}
